set nocompatible
set noswapfile

let mapleader=","

" Enable filetype plugins
filetype plugin on

" -----------------------------------------------------------------
"  Set colorscheme
" -----------------------------------------------------------------
syntax enable
colorscheme jellybeans

" -----------------------------------------------------------------
"  Text Formatting
" -----------------------------------------------------------------
autocmd FileType * set tabstop=2|set shiftwidth=2|set expandtab 
autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab
autocmd FileType make set tabstop=8|set shiftwidth=8|set noexpandtab 

set number

" -----------------------------------------------------------------
"  Remapping
" -----------------------------------------------------------------
map <F2> :retab <CR> :wq! <CR>

" Disable scrollbar
:set guioptions-=L

" -----------------------------------------------------------------
"  Shortcuts
" -----------------------------------------------------------------

" Opens an edit command with the path of the currently edited file filled in
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Shortcut for silver searcher
map <Leader>ag :Ag 

" Command-/ to toggle comments
map <D-/> <plug>NERDCommenterToggle<CR>

" -----------------------------------------------------------------
"  Load external modules
" -----------------------------------------------------------------
call pathogen#infect()

" Automatically read file changes from disk
set autoread

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.jar,*/target/**

" -----------------------------------------------------------------
" NERDTree configuration
" -----------------------------------------------------------------
map <Leader>nt :NERDTreeToggle<CR>
augroup AuNERDTreeCmd
autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif
endfunction
